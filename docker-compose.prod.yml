version: "3.9"

# db(MySQL),app(Django),web(Nginx)のコンテナを作成
services:
  db:
    container_name: mysql
    build:
      context: .
      dockerfile: Docker/MySQL/Dockerfile
    platform: linux/x86_64
    volumes:
      - db_data:/var/lib/mysql
    env_file:
      - .env
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD

  app:
    container_name: app
    build:
      context: .
      dockerfile: Docker/Django/Dockerfile
    volumes:
      - ./Django_App:/code
      - ./static:/static
    # 8000番ポートをNginx側が接続できるよう開く
    expose:
      - "8000"
    # gunicornを起動させる
    command:  bash -c "python manage.py collectstatic --noinput && \
              gunicorn djangopj.wsgi:application --bind 0.0.0.0:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        # dbのヘルスチェックが終わってからappを起動させる
        condition: service_healthy

  web:
    # コンテナ名をwebに指定
    container_name: web
    # NginxのDockerfileをビルドする
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: Docker/Nginx/Dockerfile
    # ボリュームを指定
    # ローカルの/staticをコンテナの/staticにマウントする
    volumes:
      - ./static:/static
    # ローカルの80番ボートをコンテナの80番ポートとつなぐ
    ports:
      - "80:80"
    # 先にappを起動してからwebを起動する
    depends_on:
      - app
      
volumes:
  db_data:
  static: